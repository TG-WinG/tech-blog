name: cicd pipeline

on:
  push:
    branches: ["qwe"] # 'dev' 브랜치에 push될 때만 실행

jobs:
  deploy: # ✅ CD 단계: Docker 이미지 빌드 및 AWS 배포
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    env:
      DOCKER_USERNAME: ${{secrets.DOCKER_USERNAME}}
      DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
      
    steps:
      - uses: actions/checkout@v4 # GitHub 저장소 체크아웃

      - name: Ensure resources directory exists
        run: mkdir -p ./src/main/resources/ # application.yml 파일을 저장할 디렉토리 생성

      # for test
      - name: Replace application.yml with DEV_YML
        run: echo "${{ secrets.DEV_YML }}" | base64 --decode > ./src/main/resources/application.yml # 테스트용 application.yml 설정

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin' # JDK 17 설정

      - name: Grant execute permission for Gradle Wrapper
        run: chmod +x gradlew # Gradle 실행 권한 부여

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4 # Gradle 설정

      - name: Build with Gradle (DEV_YML)
        run: ./gradlew build # 프로젝트 빌드 실행

      - name: Docker build & push to Docker Hub
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }} # Docker Hub 로그인
          docker build -t ${{ secrets.DOCKER_USERNAME }}/docker-test . # Docker 이미지 빌드
          docker push ${{ secrets.DOCKER_USERNAME }}/docker-test # Docker Hub에 이미지 푸시

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }} # AWS 인증 정보 설정

      - name: Upload deploy.zip to S3
        run: |
          mkdir -p deploy # 배포 파일을 위한 디렉토리 생성
          cp appspec.yml docker-compose.yml deploy/ # 배포 관련 파일 복사
          cp -r scripts deploy/ # 배포 스크립트 복사
          envsubst < scripts/deploy.sh > deploy/scripts/deploy.sh # 환경변수를 적용한 배포 스크립트 생성
          zip -r deploy.zip deploy/ # 배포용 ZIP 파일 생성
          aws s3 cp deploy.zip s3://${{ secrets.AWS_S3_BUCKET_NAME }}/deploy.zip # S3에 ZIP 파일 업로드

      - name: Deploy with CodeDeploy
        run: |
          aws deploy create-deployment \
            --application-name spring-app \
            --deployment-group-name spring-app-group \
            --s3-location bucket=${{ secrets.AWS_S3_BUCKET_NAME }},bundleType=zip,key=deploy.zip # AWS CodeDeploy를 통해 배포 진행

# name: AWS EC2 자동 배포

# on:
#   push:
#     branches: [ "dev" ]

# jobs:

#   build:

#     runs-on: ubuntu-latest

#     env:
#       host: ${{ secrets.EC2_HOST }}
#       username: ${{ secrets.EC2_USERNAME }}

#     steps:
#       - uses: actions/checkout@v4.1.2

#       - name: Show git status
#         run: git status

#       - name: Setup Java JDK
#         uses: actions/setup-java@v4.2.1
#         with:
#           java-version: 17
#           distribution: temurin
#           java-package: jdk
#           architecture: x64
#           cache: gradle

#       - name: Build Jar
#         run: |
#           chmod 755 gradlew
#           ./gradlew bootJar

#       - name: Prepare SSH connect
#         env:
#           private_key: ${{ secrets.EC2_PRIVATE_KEY }}
#         run: |
#           echo "$private_key" > private_key.pem
#           chmod 400 private_key.pem
#           mkdir ~/.ssh
#           ssh-keyscan -t rsa $host > ~/.ssh/known_hosts

#       - name: Upload deployment scripts
#         run: |
#           sudo chmod 755 script/deploy/*
#           scp -i private_key.pem -r script/deploy/* "${username}@${host}:deploy"

#       - name: Kill current running Spring process
#         run: ssh -i private_key.pem "${username}@${host}" "deploy/shutdown.sh; deploy/backup.sh"

#       - name: Send jar file to EC2
#         run: |
#           jarPath=$(./gradlew -q jarPath)
#           scp -i private_key.pem $jarPath "${username}@${host}:~/server.jar"

#       - name: Startup new uploaded jar
#         run: ssh -i private_key.pem "${username}@${host}" "source ~/.env; deploy/startup.sh"

#       - name: Wait 30 seconds for server to startup
#         run: sleep 30

#       - name: Check and Recover
#         run: ssh -i private_key.pem "${username}@${host}" "source ~/.env; deploy/check_and_recover.sh"
